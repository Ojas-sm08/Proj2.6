@model HospitalManagementSystem.Models.Appointment
@inject IHttpContextAccessor HttpContextAccessor
@using System.Globalization

@{
    ViewData["Title"] = "Edit Appointment";
    var role = HttpContextAccessor.HttpContext?.Session.GetString("Role");
    Layout = "~/Views/Shared/_Layout.cshtml";
    string initialAppointmentDateTimeISO = Model?.AppointmentDateTime.ToString("o", CultureInfo.InvariantCulture) ?? "null";
}

<h2 class="mb-4 text-center">✏️ Edit Appointment</h2>

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card shadow-sm p-4">
            <div class="card-body">
                <form asp-action="Edit">
                    @Html.AntiForgeryToken()
                    <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>
                    <input type="hidden" asp-for="Id" />

                    <div class="form-group mb-3">
                        <label asp-for="PatientId" class="control-label">Patient</label>
                        <input asp-for="Patient.Name" class="form-control rounded-pill" disabled />
                        <input type="hidden" asp-for="PatientId" />
                    </div>

                    <div class="form-group mb-3">
                        <label asp-for="DoctorId" class="control-label">Doctor</label>
                        <select id="doctorSelect" asp-for="DoctorId" class="form-control rounded-pill" asp-items="@(new SelectList(ViewBag.Doctors, "Value", "Text", Model.DoctorId))">
                            <option value="">-- Select Doctor --</option>
                        </select>
                        <span asp-validation-for="DoctorId" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <label for="appointmentDate" class="control-label">Appointment Date</label>
                        <input type="date" id="appointmentDate" name="AppointmentDateTime_Date" class="form-control rounded-pill"
                               value="@(Model?.AppointmentDateTime.ToString("yyyy-MM-dd"))" />
                        <span asp-validation-for="AppointmentDateTime" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <label for="availableSlots" class="control-label">Available Time Slots</label>
                        <select id="availableSlots" name="AppointmentDateTime_Time" class="form-control rounded-pill" disabled>
                            <option value="">-- Select Date and Doctor --</option>
                        </select>
                        <span id="slotLoadingMessage" class="text-info d-none"><i class="fas fa-spinner fa-spin me-2"></i>Loading slots...</span>
                        <span class="text-danger" id="slotErrorMessage"></span>
                    </div>

                    <input type="hidden" asp-for="AppointmentDateTime" id="finalAppointmentDateTime" />

                    <div class="form-group mb-3">
                        <label asp-for="Reason" class="control-label">Reason for Appointment</label>
                        <textarea asp-for="Reason" class="form-control rounded-pill" rows="3"></textarea>
                        <span asp-validation-for="Reason" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <label asp-for="Status" class="control-label">Status</label>
                        <select asp-for="Status" class="form-control rounded-pill">
                            <option value="Scheduled">Scheduled</option>
                            <option value="Completed">Completed</option>
                            <option value="Cancelled">Cancelled</option>
                        </select>
                        <span asp-validation-for="Status" class="text-danger"></span>
                    </div>

                    @if (Context.Session != null && (role == "Admin" || role == "Doctor"))
                    {
                        <div class="form-group mb-3">
                            <label asp-for="Price" class="control-label">Appointment Price</label>
                            <input asp-for="Price" type="number" step="0.01" min="0.00" class="form-control rounded-pill" />
                            <span asp-validation-for="Price" class="text-danger"></span>
                        </div>
                    }
                    else
                    {
                        <input type="hidden" asp-for="Price" />
                        @if (Model?.Price > 0)
                        {
                            <p class="mb-3 text-muted">Estimated Appointment Price: <strong class="text-success">₹@Model.Price.ToString("F2")</strong></p>
                        }
                    }

                    <div class="form-group d-grid mt-4">
                        <button type="submit" class="btn btn-primary btn-lg rounded-pill shadow-sm"><i class="fas fa-save me-2"></i> Save Changes</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="text-center mt-3">
    @if (role == "Patient")
    {
        <a asp-action="Appointments" asp-controller="Appointment" class="btn btn-outline-secondary rounded-pill"><i class="fas fa-arrow-left me-2"></i> Back to My Appointments</a>
    }
    else
    {
        <a asp-action="AllAppointments" asp-controller="Appointment" class="btn btn-outline-secondary rounded-pill"><i class="fas fa-arrow-left me-2"></i> Back to All Appointments</a>
    }
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/js/all.min.js" crossorigin="anonymous"></script>

    <script>
        $(document).ready(function () {
            const doctorSelect = $('#doctorSelect');
            const appointmentDateInput = $('#appointmentDate');
            const availableSlotsSelect = $('#availableSlots');
            const slotLoadingMessage = $('#slotLoadingMessage');
            const slotErrorMessage = $('#slotErrorMessage');
            const finalAppointmentDateTime = $('#finalAppointmentDateTime');

            const initialAppointmentDateTimeISO = '@initialAppointmentDateTimeISO';
            let initialFormattedTime = '';

            function formatTimeForDisplay(date) {
                let hours = date.getHours();
                let minutes = date.getMinutes();
                const ampm = hours >= 12 ? 'PM' : 'AM';
                hours = hours % 12 || 12;
                minutes = minutes < 10 ? '0' + minutes : minutes;
                return hours + ':' + minutes + ' ' + ampm;
            }

            if (initialAppointmentDateTimeISO !== "null") {
                const dateObj = new Date(initialAppointmentDateTimeISO);
                if (!isNaN(dateObj.getTime())) {
                    initialFormattedTime = formatTimeForDisplay(dateObj);
                }
            }

            async function loadAvailableSlots() {
                const doctorId = doctorSelect.val();
                const selectedDate = appointmentDateInput.val();

                if (!doctorId || !selectedDate) {
                    availableSlotsSelect.empty().append('<option value="">-- Select Doctor and Date --</option>').prop('disabled', true);
                    return;
                }

                slotLoadingMessage.removeClass('d-none');
                availableSlotsSelect.empty().append('<option value="">-- Loading Slots --</option>').prop('disabled', true);
                slotErrorMessage.text('').addClass('d-none');

                try {
                    const response = await $.ajax({
                        url: '/Appointment/GetAvailableSlots',
                        type: 'GET',
                        data: { doctorId, selectedDate }
                    });

                    slotLoadingMessage.addClass('d-none');
                    availableSlotsSelect.empty();

                    if (response.success && response.slots.length > 0) {
                        let matched = false;

                        $.each(response.slots, function (index, slot) {
                            const trimmed = slot.trim();
                            const isSelected = trimmed === initialFormattedTime;
                            if (isSelected) matched = true;

                            availableSlotsSelect.append(
                                $('<option></option>').val(trimmed).text(trimmed).prop('selected', isSelected)
                            );
                        });

                        if (!matched && initialFormattedTime) {
                            availableSlotsSelect.prepend(`<option selected value="${initialFormattedTime}">${initialFormattedTime} </option>`);
                        }

                        availableSlotsSelect.prop('disabled', false);
                    } else {
                        availableSlotsSelect.append('<option value="">-- No Slots Available --</option>').prop('disabled', true);
                        slotErrorMessage.text("No slots available.").removeClass('d-none');
                    }
                } catch {
                    slotLoadingMessage.addClass('d-none');
                    availableSlotsSelect.empty().append('<option value="">-- Error Loading Slots --</option>').prop('disabled', true);
                    slotErrorMessage.text("Error loading slots.").removeClass('d-none');
                }
            }

            $('form').on('submit', function () {
                const datePart = appointmentDateInput.val();
                const timePart = availableSlotsSelect.val();

                if (datePart && timePart && !["", "-- Select Time Slot --", "No slots available", "-- Error Loading Slots --"].includes(timePart)) {
                    finalAppointmentDateTime.val(`${datePart} ${timePart}`);
                } else {
                    finalAppointmentDateTime.val('');
                    alert("Please select an available time slot.");
                    return false;
                }
            });

            doctorSelect.on('change', loadAvailableSlots);
            appointmentDateInput.on('change', loadAvailableSlots);

            if (doctorSelect.val() && appointmentDateInput.val()) {
                loadAvailableSlots();
            }
        });
    </script>

    <style>
        .form-control.rounded-pill {
            border-radius: 50rem !important;
            padding-left: 1.25rem;
            padding-right: 1.25rem;
        }

        select.form-control:invalid {
            color: #6c757d;
        }
    </style>
}