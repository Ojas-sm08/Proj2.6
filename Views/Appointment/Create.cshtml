@model HospitalManagementSystem.Models.Appointment
@inject IHttpContextAccessor HttpContextAccessor

@{
    ViewData["Title"] = "Book New Appointment";

    // Get the user's role from session
    var role = HttpContextAccessor.HttpContext?.Session.GetString("Role");

    // Dynamically set the layout based on the user's role
    // Using the main _Layout.cshtml which now correctly handles global JS includes
    Layout = "~/Views/Shared/_Layout.cshtml"; // Ensure this uses the main layout
}

<h2 class="mb-4 text-center">📅 Book New Appointment</h2>

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card shadow-sm p-4">
            <div class="card-body">
                <form asp-action="Create">
                    @Html.AntiForgeryToken() @* Ensure anti-forgery token is present for POST *@

                    <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

                    @* Patient Selection - Only if Admin is booking, or pre-filled for Patient *@
                    @if (Context.Session != null && Context.Session.GetString("Role") == "Admin")
                    {
                        <div class="form-group mb-3">
                            <label asp-for="PatientId" class="control-label">Patient</label>
                            <select asp-for="PatientId" class="form-control rounded-pill" asp-items="@(new SelectList(ViewBag.Patients, "Value", "Text"))">
                                <option value="">-- Select Patient --</option>
                            </select>
                            <span asp-validation-for="PatientId" class="text-danger"></span>
                        </div>
                    }
                    else if (Context.Session != null && Context.Session.GetString("Role") == "Patient")
                    {
                        <!-- Hidden input for PatientId if current user is a patient -->
                        <input type="hidden" asp-for="PatientId" value="@(Context.Session.GetInt32("PatientId") ?? 0)" />
                        <p class="mb-3">Booking for: <strong class="text-primary">@(Context.Session.GetString("Username") ?? "Guest User")</strong></p>
                    }

                    <div class="form-group mb-3">
                        <label asp-for="DoctorId" class="control-label">Doctor</label>
                        <select id="doctorSelect" asp-for="DoctorId" class="form-control rounded-pill" asp-items="@(new SelectList(ViewBag.Doctors, "Value", "Text"))">
                            <option value="">-- Select Doctor --</option>
                        </select>
                        <span asp-validation-for="DoctorId" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <label for="appointmentDate" class="control-label">Appointment Date</label>
                        <input type="date" id="appointmentDate" name="AppointmentDateTime_Date" class="form-control rounded-pill" value="@DateTime.Today.ToString("yyyy-MM-dd")" />
                        <span asp-validation-for="AppointmentDateTime" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <label for="availableSlots" class="control-label">Available Time Slots</label>
                        <select id="availableSlots" name="AppointmentDateTime_Time" class="form-control rounded-pill" disabled>
                            <option value="">-- Select Date and Doctor --</option>
                        </select>
                        <span id="slotLoadingMessage" class="text-info d-none"><i class="fas fa-spinner fa-spin me-2"></i>Loading slots...</span>
                        <span class="text-danger" id="slotErrorMessage"></span>
                    </div>

                    @* Hidden field to combine date and time for model binding *@
                    <input type="hidden" asp-for="AppointmentDateTime" id="finalAppointmentDateTime" />


                    <div class="form-group mb-3">
                        <label asp-for="Reason" class="control-label">Reason for Appointment</label>
                        <textarea asp-for="Reason" class="form-control rounded-pill" rows="3" placeholder="e.g., General check-up, Consultation for fever"></textarea>
                        <span asp-validation-for="Reason" class="text-danger"></span>
                    </div>

                    @* NEW: Price input for the appointment *@
                    @if (Context.Session != null && (Context.Session.GetString("Role") == "Admin" || Context.Session.GetString("Role") == "Doctor"))
                    {
                        <div class="form-group mb-3">
                            <label asp-for="Price" class="control-label">Appointment Price</label>
                            <input asp-for="Price" type="number" step="0.01" min="0.00" class="form-control rounded-pill" />
                            <span asp-validation-for="Price" class="text-danger"></span>
                        </div>
                    }
                    else
                    {
                        <!-- Hidden price input for patients, can be used to display a default or calculated price if desired -->
                        <input type="hidden" asp-for="Price" value="@Model.Price" />
                        @if (Model.Price > 0)
                        {
                            <p class="mb-3 text-muted">Estimated Appointment Price: <strong class="text-success">₹@Model.Price.ToString("F2")</strong></p>
                        }
                    }

                    <div class="form-group d-grid mt-4">
                        <button type="submit" class="btn btn-primary btn-lg rounded-pill shadow-sm"><i class="fas fa-plus-circle me-2"></i> Book Appointment</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="text-center mt-3">
    @if (Context.Session != null && Context.Session.GetString("Role") == "Patient")
    {
        <a asp-action="Appointments" asp-controller="Appointment" class="btn btn-outline-secondary rounded-pill"><i class="fas fa-arrow-left me-2"></i> Back to My Appointments</a>
    }
    else
    {
        <a asp-action="AllAppointments" asp-controller="Appointment" class="btn btn-outline-secondary rounded-pill"><i class="fas fa-arrow-left me-2"></i> Back to All Appointments</a>
    }
</div>

<!-- Custom Confirmation Modal (replacing window.alert/confirm) -->
<div class="modal fade" id="customAlertModal" tabindex="-1" aria-labelledby="customAlertModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="customAlertModalLabel">Message</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="customAlertModalBody">
                <!-- Message will be inserted here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <!-- Font Awesome for icons is fine here -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/js/all.min.js" crossorigin="anonymous"></script>

    @* REMOVED redundant jQuery and Bootstrap JS imports - they are in _Layout.cshtml *@
    @* <script src="~/lib/jquery/dist/jquery.min.js"></script> *@
    @* <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script> *@

    <script>
        $(document).ready(function () {
            const doctorSelect = $('#doctorSelect');
            const appointmentDateInput = $('#appointmentDate');
            const availableSlotsSelect = $('#availableSlots');
            const slotLoadingMessage = $('#slotLoadingMessage');
            const slotErrorMessage = $('#slotErrorMessage');
            const finalAppointmentDateTime = $('#finalAppointmentDateTime');

            // Function to display custom Bootstrap alert modal
            function showCustomAlert(title, message) {
                $('#customAlertModalLabel').text(title);
                $('#customAlertModalBody').html(message); // Use .html() to allow for bold/other tags
                var modal = new bootstrap.Modal(document.getElementById('customAlertModal'));
                modal.show();
            }

            // Function to load available slots via AJAX
            function loadAvailableSlots() {
                const doctorId = doctorSelect.val();
                const selectedDate = appointmentDateInput.val();

                // Clear previous slots and messages
                availableSlotsSelect.empty().append('<option value="">-- Loading Slots --</option>').prop('disabled', true);
                slotErrorMessage.text('').addClass('d-none');
                slotLoadingMessage.removeClass('d-none');

                if (doctorId && selectedDate) {
                    $.ajax({
                        url: '@Url.Action("GetAvailableSlots", "Appointment")',
                        type: 'GET',
                        data: {
                            doctorId: doctorId,
                            selectedDate: selectedDate
                        },
                        success: function (response) {
                            slotLoadingMessage.addClass('d-none');

                            if (response.success && response.slots && response.slots.length > 0) {
                                availableSlotsSelect.empty();
                                $.each(response.slots, function (index, slot) {
                                    availableSlotsSelect.append($('<option></option>').val(slot).text(slot));
                                });
                                availableSlotsSelect.prop('disabled', false);

                                // If the only slot is "No slots available", keep disabled
                                if (response.slots.length === 1 && response.slots[0] === "No slots available") {
                                    availableSlotsSelect.prop('disabled', true);
                                    slotErrorMessage.text(response.message || "No slots found for this date and doctor.").removeClass('d-none');
                                }

                            } else if (response.success === false) { // Handle explicit server-side errors
                                availableSlotsSelect.empty().append('<option value="">-- Error Loading Slots --</option>');
                                slotErrorMessage.text(response.message || "An error occurred on the server.").removeClass('d-none');
                            } else { // Handle unexpected empty successful response
                                availableSlotsSelect.empty().append('<option value="">-- No Slots Available --</option>');
                                slotErrorMessage.text("No slots found for this date and doctor.").removeClass('d-none');
                            }
                        },
                        error: function (xhr, status, error) {
                            slotLoadingMessage.addClass('d-none');
                            availableSlotsSelect.empty().append('<option value="">-- Error Loading Slots --</option>');
                            availableSlotsSelect.prop('disabled', true); // Keep disabled on error

                            let errorMessage = 'Error loading slots. Please try again.';
                            try {
                                const errorResponse = JSON.parse(xhr.responseText);
                                if (errorResponse && errorResponse.message) {
                                    errorMessage = errorResponse.message;
                                } else if (xhr.status === 404) {
                                    errorMessage = "Doctor or slots endpoint not found. Check server logs.";
                                } else if (xhr.status === 400) {
                                    errorMessage = "Invalid request for slots. Missing or invalid parameters.";
                                }
                            } catch (e) {
                                // If responseText isn't JSON, use generic error
                            }
                            slotErrorMessage.text(errorMessage).removeClass('d-none');
                            console.error("AJAX Error:", status, error, xhr.responseText);
                        }
                    });
                } else {
                    slotLoadingMessage.addClass('d-none');
                    availableSlotsSelect.empty().append('<option value="">-- Select Doctor and Date --</option>');
                    availableSlotsSelect.prop('disabled', true);
                    slotErrorMessage.text('').addClass('d-none'); // Clear any previous error message
                }
            }

            // Combine date and time before form submission
            $('form').on('submit', function () {
                const datePart = appointmentDateInput.val(); // "yyyy-MM-dd"
                const timePart = availableSlotsSelect.val(); // "HH:mm AM/PM" or "HH:mm"

                // Only combine if both date and time are selected and not the default/error text
                if (datePart && timePart && timePart !== "" && timePart !== "-- Select Time Slot --" && timePart !== "No slots available" && timePart !== "-- Error Loading Slots --") {
                    // It's crucial that the timePart is in a format that DateTime.ParseExact can handle.
                    // The C# side expects a combined DateTime.
                    // If the JS formats as "HH:mm tt", then the C# side needs to parse that.
                    // For simplicity and robustness with ASP.NET Core model binding,
                    // let's ensure the JS sends ISO 8601 combined string if possible.
                    // However, given the GetAvailableSlots provides "HH:mm tt", we will combine.

                    // Convert "HH:mm tt" to "HH:mm:ss" for easier DateTime.Parse handling by MVC.
                    let combinedDateTimeString = `${datePart} ${timePart}`;
                    // This is sufficient for the default MVC model binder to parse a DateTime.
                    // Example: "2025-06-23 09:00 AM"

                    finalAppointmentDateTime.val(combinedDateTimeString);
                } else {
                    // If no valid time slot is selected, clear the hidden field and prevent submission
                    finalAppointmentDateTime.val('');
                    showCustomAlert('Selection Required', 'Please select an available time slot before booking.');
                    return false; // Prevent form submission
                }
            });


            // Attach event listeners
            doctorSelect.on('change', loadAvailableSlots);
            appointmentDateInput.on('change', loadAvailableSlots);

            // Initial load if doctor/date are pre-selected (e.g., after a validation error)
            // This ensures that if the page reloads with pre-selected values, slots are fetched.
            if (doctorSelect.val() && appointmentDateInput.val()) {
                loadAvailableSlots();
            }
        });
    </script>

    <style>
        /* Add some styling for the select inputs to make them rounded, similar to other inputs */
        .form-control.rounded-pill {
            border-radius: 50rem !important;
            padding-left: 1.25rem;
            padding-right: 1.25rem;
        }

        .form-select.rounded-pill {
            border-radius: 50rem !important;
            padding-left: 1.25rem;
            padding-right: 1.25rem;
        }

        /* Adjust placeholder font style if needed */
        select.form-control:invalid {
            color: #6c757d; /* grey out default option */
        }
    </style>
}
