@model HospitalManagementSystem.Models.Appointment
@inject IHttpContextAccessor HttpContextAccessor

@{
    ViewData["Title"] = "Book New Appointment";

    // Get the user's role from session
    var role = HttpContextAccessor.HttpContext?.Session.GetString("Role");

    // Dynamically set the layout based on the user's role
    if (role == "Patient")
    {
        Layout = "~/Views/Shared/_Layout.Patient.cshtml";
    }
    else // Default for Admin, Doctor, or unauthenticated users
    {
        Layout = "~/Views/Shared/_Layout.cshtml";
    }
}

<h2 class="mb-4 text-center">📅 Book New Appointment</h2>

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card shadow-sm p-4">
            <div class="card-body">
                <form asp-action="Create">
                    <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

                    @* Patient Selection - Only if Admin is booking, or pre-filled for Patient *@
                    @if (Context.Session != null && Context.Session.GetString("Role") == "Admin")
                    {
                        <div class="form-group mb-3">
                            <label asp-for="PatientId" class="control-label">Patient</label>
                            <select asp-for="PatientId" class="form-control" asp-items="@(new SelectList(ViewBag.Patients, "Value", "Text"))">
                                <option value="">-- Select Patient --</option>
                            </select>
                            <span asp-validation-for="PatientId" class="text-danger"></span>
                        </div>
                    }
                    else if (Context.Session != null && Context.Session.GetString("Role") == "Patient")
                    {
                        <!-- Hidden input for PatientId if current user is a patient -->
                        <input type="hidden" asp-for="PatientId" value="@(Context.Session.GetInt32("PatientId") ?? 0)" />
                        <p class="mb-3">Booking for: <strong>@(Context.Session.GetString("Username") ?? "Guest User")</strong></p>
                    }

                    <div class="form-group mb-3">
                        <label asp-for="DoctorId" class="control-label">Doctor</label>
                        <select id="doctorSelect" asp-for="DoctorId" class="form-control" asp-items="@(new SelectList(ViewBag.Doctors, "Value", "Text"))">
                            <option value="">-- Select Doctor --</option>
                        </select>
                        <span asp-validation-for="DoctorId" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <label for="appointmentDate" class="control-label">Appointment Date</label>
                        <input type="date" id="appointmentDate" name="AppointmentDateTime_Date" class="form-control" value="@DateTime.Today.ToString("yyyy-MM-dd")" />
                        <span asp-validation-for="AppointmentDateTime" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <label for="availableSlots" class="control-label">Available Time Slots</label>
                        <select id="availableSlots" name="AppointmentDateTime_Time" class="form-control" disabled>
                            <option value="">-- Select Date and Doctor --</option>
                        </select>
                        <span id="slotLoadingMessage" class="text-info d-none">Loading slots...</span>
                        <span class="text-danger" id="slotErrorMessage"></span>
                    </div>

                    @* Hidden field to combine date and time for model binding *@
                    <input type="hidden" asp-for="AppointmentDateTime" id="finalAppointmentDateTime" />


                    <div class="form-group mb-3">
                        <label asp-for="Reason" class="control-label">Reason for Appointment</label>
                        <textarea asp-for="Reason" class="form-control" rows="3"></textarea>
                        <span asp-validation-for="Reason" class="text-danger"></span>
                    </div>



                    <div class="form-group d-grid mt-4">
                        <button type="submit" class="btn btn-primary btn-lg"><i class="fas fa-plus-circle me-2"></i> Book Appointment</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <!-- Font Awesome for icons -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/js/all.min.js" crossorigin="anonymous"></script>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>

    <script>
        $(document).ready(function () {
            const doctorSelect = $('#doctorSelect');
            const appointmentDateInput = $('#appointmentDate');
            const availableSlotsSelect = $('#availableSlots');
            const slotLoadingMessage = $('#slotLoadingMessage');
            const slotErrorMessage = $('#slotErrorMessage');
            const finalAppointmentDateTime = $('#finalAppointmentDateTime');

            // Function to load available slots
            function loadAvailableSlots() {
                const doctorId = doctorSelect.val();
                const selectedDate = appointmentDateInput.val();

                // Clear previous slots and messages
                availableSlotsSelect.empty().append('<option value="">-- Loading Slots --</option>').prop('disabled', true);
                slotErrorMessage.text('').addClass('d-none');
                slotLoadingMessage.removeClass('d-none');

                if (doctorId && selectedDate) {
                    $.ajax({
                        url: '@Url.Action("GetAvailableSlots", "Appointment")',
                        type: 'GET',
                        data: {
                            doctorId: doctorId,
                            selectedDate: selectedDate
                        },
                        success: function (response) {
                            slotLoadingMessage.addClass('d-none');

                            // Check if the response indicates success and has slots
                            if (response.success && response.slots && response.slots.length > 0) {
                                availableSlotsSelect.empty();
                                $.each(response.slots, function (index, slot) {
                                    // The value attribute should be just the time for model binding
                                    // The text displayed can be the full string (e.g., "-- Select Time Slot --" or "09:00 AM")
                                    let optionValue = slot;
                                    // If it's not the default text, just use the time part for the value
                                    if (slot !== "-- Select Time Slot --" && slot !== "No slots available") {
                                        optionValue = slot.split(' ')[0]; // Take "HH:mm" from "HH:mm AM/PM" or "HH:mm"
                                    }
                                    availableSlotsSelect.append($('<option></option>').val(optionValue).text(slot));
                                });
                                availableSlotsSelect.prop('disabled', false);

                                // If the only slot is "No slots available", keep disabled
                                if (response.slots.length === 1 && response.slots[0] === "No slots available") {
                                    availableSlotsSelect.prop('disabled', true);
                                    slotErrorMessage.text(response.message || "No slots found for this date and doctor.").removeClass('d-none');
                                }

                            } else if (response.success === false) { // Handle explicit server-side errors
                                availableSlotsSelect.empty().append('<option value="">-- Error Loading Slots --</option>');
                                slotErrorMessage.text(response.message || "An error occurred on the server.").removeClass('d-none');
                            } else { // Handle unexpected empty successful response
                                availableSlotsSelect.empty().append('<option value="">-- No Slots Available --</option>');
                                slotErrorMessage.text("No slots found for this date and doctor.").removeClass('d-none');
                            }
                        },
                        error: function (xhr, status, error) {
                            slotLoadingMessage.addClass('d-none');
                            availableSlotsSelect.empty().append('<option value="">-- Error Loading Slots --</option>');

                            let errorMessage = 'Error loading slots. Please try again.';
                            try {
                                const errorResponse = JSON.parse(xhr.responseText);
                                if (errorResponse && errorResponse.message) {
                                    errorMessage = errorResponse.message;
                                } else if (xhr.status === 404) {
                                    errorMessage = "Doctor or slots endpoint not found.";
                                } else if (xhr.status === 400) {
                                    errorMessage = "Invalid request for slots.";
                                }
                            } catch (e) {
                                // If responseText isn't JSON, use generic error
                            }
                            slotErrorMessage.text(errorMessage).removeClass('d-none');
                            console.error("AJAX Error:", status, error, xhr.responseText);
                        }
                    });
                } else {
                    slotLoadingMessage.addClass('d-none');
                    availableSlotsSelect.empty().append('<option value="">-- Select Doctor and Date --</option>');
                    availableSlotsSelect.prop('disabled', true);
                    slotErrorMessage.text('').addClass('d-none'); // Clear any previous error message
                }
            }

            // Combine date and time before form submission
            $('form').on('submit', function () {
                const datePart = appointmentDateInput.val(); // "yyyy-MM-dd"
                const timePart = availableSlotsSelect.val(); // "HH:mm" (e.g., "09:00", "14:30")

                // Only combine if both date and time are selected and not the default/error text
                if (datePart && timePart && timePart !== "" && timePart !== "-- Select Time Slot --" && timePart !== "No slots available" && timePart !== "-- Error Loading Slots --") {
                    // Combine into a full datetime string for model binding
                    // Format as ISO 8601 string compatible with DateTime parsing
                    // Example: "2025-06-11T14:30:00"
                    finalAppointmentDateTime.val(`${datePart}T${timePart}:00`);
                } else {
                    // If no valid time slot is selected, clear the hidden field and prevent submission
                    finalAppointmentDateTime.val('');
                    alert("Please select an available time slot before booking."); // Use a custom modal instead of alert
                    return false; // Prevent form submission
                }
            });


            // Attach event listeners
            doctorSelect.on('change', loadAvailableSlots);
            appointmentDateInput.on('change', loadAvailableSlots);

            // Initial load if doctor/date are pre-selected (e.g., after a validation error)
            // This ensures that if the page reloads with pre-selected values, slots are fetched.
            if (doctorSelect.val() && appointmentDateInput.val()) {
                loadAvailableSlots();
            }
        });
    </script>
}
