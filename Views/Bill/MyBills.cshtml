@model IEnumerable<HospitalManagementSystem.Models.Bill>
@inject IHttpContextAccessor HttpContextAccessor

@{
    ViewData["Title"] = "My Bills";
    var role = HttpContextAccessor.HttpContext?.Session.GetString("Role");
    var isPatient = (role == "Patient");
    var isAdmin = (role == "Admin");

    // Determine layout based on user role
    if (isPatient)
    {
        Layout = "~/Views/Shared/_Layout.Patient.cshtml";
    }
    else if (isAdmin)
    {
        Layout = "~/Views/Shared/_Layout.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/_Layout.cshtml"; // Fallback
    }
}

<h2 class="mb-4 text-center">🧾 @ViewData["Title"]</h2>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
@if (TempData["InfoMessage"] != null)
{
    <div class="alert alert-info alert-dismissible fade show" role="alert">
        @TempData["InfoMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="container my-4">
    <div class="card shadow-lg rounded-3">
        <div class="card-header bg-primary text-white py-3">
            <h4 class="mb-0">Your Billing History</h4>
        </div>
        <div class="card-body">
            <form asp-action="Index" method="get" class="mb-4">
                <div class="input-group">
                    <input type="text" name="searchString" class="form-control rounded-pill-start" placeholder="Search bills by doctor, status, ID or notes..." value="@ViewData["CurrentFilter"]">
                    <button type="submit" class="btn btn-outline-primary rounded-pill-end"><i class="fas fa-search me-1"></i> Search</button>
                </div>
            </form>

            @if (!Model.Any())
            {
                <div class="alert alert-info text-center" role="alert">
                    No bills found.
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover table-striped">
                        <thead class="table-dark">
                            <tr>
                                <th>Bill ID</th>
                                <th>Bill Date</th>
                                <th>Doctor</th>
                                <th>Appointment Date</th>
                                <th>Total Amount</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                <tr id="bill-row-@item.BillId">
                                    @* Added ID for easy JS targeting *@
                                    <td>@Html.DisplayFor(modelItem => item.BillId)</td>
                                    <td>@Html.DisplayFor(modelItem => item.BillDate)</td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.Doctor.Name)
                                    </td>
                                    <td>
                                        @if (item.Appointment != null)
                                        {
                                            @Html.DisplayFor(modelItem => item.Appointment.AppointmentDateTime)
                                        }
                                        else
                                        {
                                            <span>N/A</span>
                                        }
                                    </td>
                                    <td>₹@Html.DisplayFor(modelItem => item.TotalAmount)</td>
                                    <td>
                                        <span class="badge
                                              @(item.Status == "Pending" ? "bg-warning text-dark" :
                                                item.Status == "Paid" ? "bg-success" :
                                                item.Status == "Partially Paid" ? "bg-info text-dark" : "bg-secondary")" id="bill-status-@item.BillId">
                                            @Html.DisplayFor(modelItem => item.Status)
                                        </span>
                                    </td>
                                    <td>
                                        <a asp-action="Details" asp-route-id="@item.BillId" class="btn btn-sm btn-info text-white me-1" title="View Details">
                                            <i class="fas fa-info-circle"></i> Details
                                        </a>
                                        @if (item.Status == "Pending" && (isPatient || isAdmin)) // Only show Pay Now for pending bills and authorized roles
                                        {
                                            <button type="button" class="btn btn-sm btn-success pay-now-btn" data-bill-id="@item.BillId" title="Pay with Stripe">
                                                <i class="fas fa-credit-card"></i> Pay Now
                                            </button>
                                        }
                                        @if (isAdmin) // Only Admin can edit/delete
                                        {
                                            <a asp-action="Edit" asp-route-id="@item.BillId" class="btn btn-sm btn-primary me-1" title="Edit Bill">
                                                <i class="fas fa-edit"></i> Edit
                                            </a>
                                            <button type="button" class="btn btn-sm btn-danger delete-bill-btn" data-bill-id="@item.BillId" title="Delete Bill">
                                                <i class="fas fa-trash-alt"></i> Delete
                                            </button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

@* Custom Confirmation Modal *@
<div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="confirmationModalLabel">Confirm Action</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="modalMessage">
                Are you sure you want to proceed?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmActionButton">Confirm</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/js/all.min.js" crossorigin="anonymous"></script>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script> @* Ensure Bootstrap JS is loaded for modal *@
    <script src="https://js.stripe.com/v3/"></script> @* Load Stripe.js library *@

    <script type="text/javascript">
        $(document).ready(function () {
            // Stripe instance (initialized with a placeholder, will be updated by AJAX)
            let stripe;

            // Event listener for "Pay Now" button
            $(document).on('click', '.pay-now-btn', function (e) {
                e.preventDefault(); // Prevent default button action
                const billId = $(this).data('bill-id');
                const $button = $(this); // Reference to the clicked button

                // Set up the confirmation modal for Pay Now
                $('#confirmationModalLabel').text('Confirm Payment');
                $('#modalMessage').text('You will be redirected to a secure Stripe page to complete your payment. Do you wish to proceed?');
                $('#confirmActionButton').removeClass('btn-danger').addClass('btn-primary').off('click').on('click', function() {
                    $('#confirmationModal').modal('hide'); // Hide modal first

                    $button.prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...'); // Show loading state

                    // AJAX call to create a Stripe Checkout Session
                    $.ajax({
                        url: '@Url.Action("CreateCheckoutSession", "Bill")',
                        type: 'POST',
                        data: { billId: billId, __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val() }, // Include anti-forgery token
                        success: function (response) {
                            if (response.success && response.sessionId && response.publishableKey) {
                                // Initialize Stripe with the publishable key received from backend
                                stripe = Stripe(response.publishableKey);

                                // Redirect to Stripe Checkout
                                stripe.redirectToCheckout({
                                    sessionId: response.sessionId
                                }).then(function (result) {
                                    if (result.error) {
                                        // If `redirectToCheckout` fails due to a browser or network error
                                        console.error("Stripe Redirect Error:", result.error.message);
                                        showTemporaryMessage('alert-danger', result.error.message);
                                        $button.prop('disabled', false).html('<i class="fas fa-credit-card"></i> Pay Now'); // Re-enable button
                                    }
                                });
                            } else {
                                // Show error message if session creation failed on backend
                                console.error("Failed to create Stripe Checkout Session:", response.message);
                                showTemporaryMessage('alert-danger', response.message || 'Failed to initiate payment. Please try again.');
                                $button.prop('disabled', false).html('<i class="fas fa-credit-card"></i> Pay Now'); // Re-enable button
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error("AJAX Error creating checkout session:", status, error, xhr.responseText);
                            showTemporaryMessage('alert-danger', 'An error occurred while trying to initiate payment.');
                            $button.prop('disabled', false).html('<i class="fas fa-credit-card"></i> Pay Now'); // Re-enable button
                        }
                    });
                });
                $('#confirmationModal').modal('show'); // Show the modal
            });

            // Event listener for "Delete" button (if isAdmin is true)
            $(document).on('click', '.delete-bill-btn', function (e) {
                e.preventDefault();
                const billId = $(this).data('bill-id');
                const $rowToDelete = $(`#bill-row-${billId}`); // Get the entire row

                // Set up the confirmation modal for Delete
                $('#confirmationModalLabel').text('Confirm Deletion');
                $('#modalMessage').text('Are you sure you want to delete this bill? This action cannot be undone.');
                $('#confirmActionButton').removeClass('btn-primary').addClass('btn-danger').off('click').on('click', function() {
                    $('#confirmationModal').modal('hide'); // Hide modal first

                    // AJAX call to delete bill
                    $.ajax({
                        url: '@Url.Action("Delete", "Bill")', // Ensure this is the correct action
                        type: 'POST',
                        data: { id: billId, __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val() }, // Include anti-forgery token
                        success: function (response) {
                            if (response.success) {
                                $rowToDelete.remove(); // Remove the row from the table
                                showTemporaryMessage('alert-success', response.message);
                            } else {
                                showTemporaryMessage('alert-danger', response.message || 'Failed to delete bill.');
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error("AJAX Error deleting bill:", status, error, xhr.responseText);
                            showTemporaryMessage('alert-danger', 'An error occurred while trying to delete the bill.');
                        }
                    });
                });
                $('#confirmationModal').modal('show'); // Show the modal
            });

            // Helper function to show temporary messages
            function showTemporaryMessage(type, message) {
                let existingAlert = $('.alert.temp-message');
                if (existingAlert.length) {
                    existingAlert.remove(); // Remove any previous temporary alerts
                }

                const alertHtml = `
                    <div class="alert ${type} alert-dismissible fade show temp-message mt-3" role="alert">
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                `;
                // Append it somewhere visible, e.g., after the h2 title or inside a dedicated container
                $('h2.mb-4').after(alertHtml);

                // Automatically fade out after a few seconds
                setTimeout(function() {
                    $('.alert.temp-message').alert('close');
                }, 5000); // 5 seconds
            }

            // Initial check for any server-side TempData messages on page load
            // These are already rendered by Razor, no need for JS to create them.
            // This script block should be placed after the HTML where TempData messages are rendered.
        });
    </script>
}
