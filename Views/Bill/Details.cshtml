@model HospitalManagementSystem.Models.Bill
@inject IHttpContextAccessor HttpContextAccessor
@using System.Globalization; 

@{
    ViewData["Title"] = "Bill Details";

    var role = HttpContextAccessor.HttpContext?.Session.GetString("Role");
    var isPatient = (role == "Patient");
    var isDoctor = (role == "Doctor");
    var isAdmin = (role == "Admin");

    // Determine layout based on user role
    if (isPatient)
    {
        Layout = "~/Views/Shared/_Layout.Patient.cshtml";
    }
    else if (isDoctor)
    {
        Layout = "~/Views/Shared/_Layout.Doctor.cshtml";
    }
    else if (isAdmin)
    {
        Layout = "~/Views/Shared/_Layout.cshtml"; // Admin might use default layout, or a specific admin layout
    }
    else
    {
        Layout = "~/Views/Shared/_Layout.cshtml"; // Fallback for unauthenticated/other roles
    }
}

<h2 class="mb-4 text-center">🧾 Bill Details</h2>

<div id="messageContainer" class="mb-3">
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["InfoMessage"] != null)
    {
        <div class="alert alert-info alert-dismissible fade show" role="alert">
            @TempData["InfoMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
</div>

<div class="row justify-content-center">
    <div class="col-md-8">
        <div class="card shadow-sm p-4">
            <div class="card-header bg-primary text-white text-center rounded-top-md">
                <h4>Bill #@Html.DisplayFor(model => model.BillId)</h4>
            </div>
            <div class="card-body">
                <dl class="row">
                    <dt class="col-sm-4">Bill Date:</dt>
                    <dd class="col-sm-8">@Html.DisplayFor(model => model.BillDate)</dd>

                    <dt class="col-sm-4">Patient Name:</dt>
                    <dd class="col-sm-8">
                        @if (Model.Patient != null)
                        {
                            <a asp-controller="Patient" asp-action="Details" asp-route-id="@Model.PatientId">@Html.DisplayFor(model => model.Patient.Name)</a>
                        }
                        else
                        {
                            <span>N/A (Patient ID: @Model.PatientId)</span>
                        }
                    </dd>

                    <dt class="col-sm-4">Doctor (Billed By):</dt>
                    <dd class="col-sm-8">
                        @if (Model.Doctor != null)
                        {
                            <a asp-controller="Doctor" asp-action="Details" asp-route-id="@Model.DoctorId">@Html.DisplayFor(model => model.Doctor.Name) (@Html.DisplayFor(model => model.Doctor.Specialization))</a>
                        }
                        else if (Model.DoctorId.HasValue)
                        {
                            <span>N/A (Doctor ID: @Model.DoctorId)</span>
                        }
                        else
                        {
                            <span>Not Assigned</span>
                        }
                    </dd>

                    <dt class="col-sm-4">Associated Appointment:</dt>
                    <dd class="col-sm-8">
                        @if (Model.Appointment != null)
                        {
                            <a asp-controller="Appointment" asp-action="Details" asp-route-id="@Model.AppointmentId">
                                @Model.Appointment.AppointmentDateTime.ToString("yyyy-MM-dd hh:mm tt") -
                                @(Model.Appointment.Patient != null ? Model.Appointment.Patient.Name : "N/A Patient") with
                                @(Model.Appointment.Doctor != null ? Model.Appointment.Doctor.Name : "N/A Doctor")
                            </a>
                            <br />
                            <small class="text-muted">Reason: @(string.IsNullOrEmpty(Model.Appointment.Reason) ? "N/A" : Model.Appointment.Reason)</small>
                        }
                        else
                        {
                            <span>N/A (Appointment ID: @Model.AppointmentId)</span>
                        }
                    </dd>

                    <dt class="col-sm-4">Total Amount:</dt>
                    
                    <dd class="col-sm-8 fs-5 fw-bold text-success">@Model.TotalAmount.ToString("C")</dd>

                    <dt class="col-sm-4">Status:</dt>
                    <dd class="col-sm-8">
                        <span class="badge @(Model.Status == "Paid" ? "bg-success" : Model.Status == "Pending" ? "bg-warning text-dark" : "bg-secondary")">
                            @Html.DisplayFor(model => model.Status)
                        </span>
                    </dd>

                    <dt class="col-sm-4">Notes:</dt>
                    <dd class="col-sm-8">@(string.IsNullOrEmpty(Model.Notes) ? "N/A" : Model.Notes)</dd>
                </dl>

                <hr class="my-4" />
                <h4>Bill Items</h4>
                @if (Model.BillItems != null && Model.BillItems.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-bordered table-sm">
                            <thead class="table-light">
                                <tr>
                                    <th>Service/Item</th>
                                    <th class="text-end">Quantity</th>
                                    <th class="text-end">Unit Price</th>
                                    <th class="text-end">Amount</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.BillItems)
                                {
                                    <tr>
                                        <td>@Html.DisplayFor(modelItem => item.ItemName)</td>
                                        <td class="text-end">@Html.DisplayFor(modelItem => item.Quantity)</td>
                                        <td class="text-end">@item.UnitPrice.ToString("C")</td>
                                        <td class="text-end">@item.Amount.ToString("C")</td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr class="table-info">
                                    <td colspan="3" class="text-end fw-bold">Grand Total:</td>
                                    <td class="text-end fw-bold fs-5">@Model.TotalAmount.ToString("C")</td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                }
                else
                {
                    <p class="text-muted">No items found for this bill.</p>
                }
            </div>
            <div class="card-footer text-center d-flex justify-content-center flex-wrap gap-2"> @* MODIFIED LINE: Added d-flex, justify-content-center, flex-wrap, gap-2 *@
                @if (isAdmin || (isDoctor && (Model.Status == "Pending" || Model.Status == "Partially Paid")))
                {
                    <a asp-action="Edit" asp-route-id="@Model.BillId" class="btn btn-warning"><i class="fas fa-edit me-1"></i> Edit Bill</a> @* Removed me-2 to use gap-2 on parent *@
                }
                
                @* Mark as Paid button - only for Admin or Doctors, if status is not already Paid/Cancelled *@
                @if ((isAdmin || isDoctor) && (Model.Status == "Pending" || Model.Status == "Partially Paid"))
                {
                    <button type="button" class="btn btn-success mark-paid-btn" data-id="@Model.BillId"><i class="fas fa-check-circle me-1"></i> Mark as Paid</button> @* Removed me-2 to use gap-2 on parent *@
                }

                @* Delete button - only for Admin (assuming only admin can delete bills from details) *@
                @if (isAdmin)
                {
                    <button type="button" class="btn btn-danger delete-bill-btn" data-id="@Model.BillId"><i class="fas fa-trash-alt me-1"></i> Delete Bill</button>
                }

                @{
                    string backAction = "MyBills"; // Default for patient
                    string backController = "Bill";
                    if (isDoctor || isAdmin)
                    {
                        backAction = "Index"; // Doctor/Admin goes back to their general bill list
                    }
                }
                <a asp-action="@backAction" asp-controller="@backController" class="btn btn-secondary"> 
                    <i class="fas fa-arrow-left me-1"></i> Back to Bills List
                </a>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this bill (ID: <span id="billIdToDelete"></span>)? This action cannot be undone.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/js/all.min.js" crossorigin="anonymous"></script>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>

    @Html.AntiForgeryToken() 

    <script>
        $(document).ready(function () {
            // Helper function to display Bootstrap alerts
            function displayMessage(type, message) {
                const messageContainer = $('#messageContainer');
                const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
                const html = `
                    <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                `;
                messageContainer.html(html);
                setTimeout(() => {
                    messageContainer.find('.alert').alert('close');
                }, 5000); // Alert disappears after 5 seconds
            }

            // Mark as Paid button functionality (from Details view)
            $('.mark-paid-btn').on('click', function () {
                const billId = $(this).data('id');
                // Replace confirm() with Bootstrap modal for better UX
                if (window.confirm('Are you sure you want to mark this bill as PAID? This action cannot be undone.')) { // Temporary confirm()
                    $.ajax({
                        url: '@Url.Action("MarkAsPaid", "Bill")',
                        type: 'POST',
                        data: { id: billId },
                        headers: {
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                        },
                        success: function (response) {
                            if (response.success) {
                                displayMessage('success', response.message);
                                // Reload to reflect status change and hide/show buttons
                                location.reload();
                            } else {
                                displayMessage('danger', response.message);
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error("AJAX Error:", status, error, xhr.responseText);
                            let errorMessage = 'An error occurred while marking the bill as paid. Please try again.';
                            if (xhr.responseJSON && xhr.responseJSON.message) {
                                errorMessage = xhr.responseJSON.message;
                            } else if (xhr.responseText) {
                                // Attempt to parse a general server error message
                                const parser = new DOMParser();
                                const doc = parser.parseFromString(xhr.responseText, "text/html");
                                const h1 = doc.querySelector('h1');
                                if (h1) {
                                    errorMessage = h1.textContent;
                                } else {
                                    errorMessage = 'Server responded with an error (check console).';
                                }
                            }
                            displayMessage('danger', errorMessage);
                        }
                    });
                }
            });

            // Delete bill button functionality (Admin only, from Details view)
            let billIdToDelete = 0; // Initialize outside for modal access
            $('.delete-bill-btn').on('click', function () {
                billIdToDelete = $(this).data('id');
                $('#billIdToDelete').text(billIdToDelete); // Update modal text
                var deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
                deleteModal.show();
            });

            // Confirm Delete button click inside the modal
            $('#confirmDeleteBtn').on('click', function () {
                var deleteModalInstance = bootstrap.Modal.getInstance(document.getElementById('deleteModal'));
                deleteModalInstance.hide(); // Hide the modal

                $.ajax({
                    url: '@Url.Action("DeleteConfirmed", "Bill")', // Ensure this points to the POST action
                    type: 'POST',
                    data: { id: billIdToDelete },
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        if (response.success) {
                            displayMessage('success', response.message);
                            // Redirect to the bill index page after successful deletion
                            window.location.href = '@Url.Action("Index", "Bill")';
                        } else {
                            displayMessage('danger', response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("AJAX Error:", status, error, xhr.responseText);
                        let errorMessage = 'An error occurred while deleting the bill. Please try again.';
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        } else if (xhr.responseText) {
                            const parser = new DOMParser();
                            const doc = parser.parseFromString(xhr.responseText, "text/html");
                            const h1 = doc.querySelector('h1');
                            if (h1) {
                                errorMessage = h1.textContent;
                            } else {
                                errorMessage = 'Server responded with an error (check console).';
                            }
                        }
                        displayMessage('danger', errorMessage);
                    }
                });
            });
        });
    </script>
}
